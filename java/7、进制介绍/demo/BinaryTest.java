public class BinaryTest {
    public static void main(String[] args) {
       //0b 开头二进制
       int a = 0b1010;
       //十进制
       int b = 1010;
       //0 开头八进制
       int c = 01010;
       //x 开头十六进制
       int d = 0x1010;
       System.out.println("a="+a);
       System.out.println("b="+b);
       System.out.println("c="+c);
       System.out.println("d="+d);

       //2是int类型，int类型占4个字节，一个字节占8位，所以2的补码=2的原码=2的反码= 00000000 00000000 00000000 00000010
       //3是int类型，int类型占4个字节，一个字节占8位，所以3的补码=3的原码=3的反码= 00000000 00000000 00000000 00000011
       //2&3得到结果是：00000000 00000000 00000000 00000010，运算后是补码，但是符号位是0，所以是正数，所以原码，反码也是这个，所以得到的值转成10进制为2
       System.out.println(2&3);
       //-2的原码： 10000000 00000000 00000000 00000010
       //-2的反码： 11111111 11111111 11111111 11111101
       //-2的补码： 反码+1 = 11111111 11111111 11111111 11111101 + 1 = 11111111 11111111 11111111 11111110
       //所以~-2=:  00000000 00000000 00000000 00000001，运算后符号位是0，正数，所以他的原码，反码一样，得到的值转成为10进制为1
       System.out.println(~-2);
       //2的原码=补码=反码=00000000 00000000 00000000 00000010
       //~2通过补码运算后为=11111111 1111111111111111 11111101
       //由于~2运算后是1，是个负数，要转回原码，先转反码=补码-1 = 11111111 1111111111111111 11111101 - 1 = 11111111 11111111 11111111 11111100
       //反码：11111111 1111111111111111 11111100转原码等于符号位不变，其他位置取反 10000000 00000000 00000000 00000011
       //所以~2 = 10000000 00000000 00000000 00000011 转成十进制为-3
       System.out.println(~2);
    }
}